1. 0CP
    *什么是0CP?
        0CP是软件七大开发原则当中最基本的一个原则：开闭原则
        对什么开？对扩展开放。
        对什么闭？对修改关闭。
    *0CP原则是最核心的，最基本的，其他的六个原则都是为这个原则服务的。
        *0CP开闭原则的核心是什么？
            只要你在扩展系统功能的时候，没有修改以前写好的代码，那么你就是符合0CP原则的。
            反之，如果在扩展系统功能的时候，你修改了之前的代码，那么这个设计是失败的，违背0CP原则。
        *当进行系统功能扩展的时候，如果动了之前稳定的程序，修改了之前的程序，之前所有程序都需要进行重新测试。这是不想看到的，因为非常麻烦。

2. 依赖倒置原则
    *什么是依赖倒置原则？
        依赖倒置原则是开闭原则的基础。
        依赖倒置原则的核心思想是面向接口编程，依赖抽象，不要依赖具体类。
        依赖倒置原则是程序设计中最基础的设计原则。
    *依赖倒置原则的实现步骤：
        1. 面向接口编程，面向抽象编程，不要面向实现编程。
        2. 不要依赖具体类，要依赖抽象类或接口。
        3. 接口和抽象类是设计时使用的，实现类是程序在运行时使用的。
        4. 不要直接使用实现类，而要使用实现类的子类。

3. 当程序设计过程中，既不满足0CP原则，也不满足依赖倒置原则，那么如何解决？
  可以使用控制反转来解决这个问覅


    4. 控制反转：控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，用来减低计算机代码之间的耦合度
    反转是什么意思呢？
        反转的就是两件事？

        第一件事：不采用硬编码的方式创建对象 不使用new 来对象，（不要关心谁来创建,把创建权反转  例如spring BeanFactory 来做）
        第二件事：原来程序设计中，我们直接使用具体实现类，手动使用代码维护对象之间的依赖关系。（将对象之间依赖关系的维护权反转，交出去,例如spring的配置bean的xml）

5. spring框架
    * Spring是一个实现了控制反转Ioc这种思想的框架，实现了依赖注入DI。
       Spring 可以帮你创建对象，管理对象
       Spring 可以 帮你管理维护对象之间的依赖关系
    * 实现了控制反转IoC思想有很多方式，最常见的一个实现方式是 依赖注入（Dependency Injection）
    * 依赖注入的方式又包括常见的两种：
        a. set注入（执行set方法给属性赋值）
        b. 构造方法注入 （执行构造方法给属性赋值）
    * 依赖注入 中“依赖”是指什么，“注入“又是值神
        依赖： A对象 需要 B对象提供的服务 a依赖于b  对象之间的依赖关系
        注入： 是一种方法，手段，可以是a和b产生关系

6. 注意术语
    OCP: 开闭原则 （开发原则）
    DIP: 依赖倒置原则（开发原则）
    IoC:控制反转（设计思想）
    DI :  依赖注入（实现控制反转设计思想的一种方式 ）

